Installation Instructions
*************************

This document describes the installation steps needed to get, compile and run the solar-logger sqlite on Ubuntu 9.1.

Install required libraries
==========================

1. sqlite3 is part of the debian package system and can be installed via apt-get
$ apt-get install sqlite3 libsqlite3-dev

2. Fetch and install libmodbus
$ wget http://launchpad.net/libmodbus/trunk/2.0.3/+download/libmodbus-2.0.3.tar.gz
$ tar xzf libmodbus-2.0.3.tar.gz
$ cd libmodbus-2.0.3
$ sh configure
$ sudo make install

3. Fetch and install yasdi
$ wget http://www.sma.de/fileadmin/fm-dam/documents/YASDI/yasdi-1.8.0Build11-src.zip
$ mkdir yasdi-1.8.0Build11
$ cd yasdi-1.8.0Build11/
$ unzip ../yasdi-1.8.0Build11-src.zip 
$ cd projects/generic-cmake/
$ mkdir build-gcc
$ cd build-gcc/
$ sudo apt-get install cmake
$ cmake ..
$ sudo make install
$ cd ..
$ sudo mkdir /usr/local/include/yasdi
$ sudo cp smalib/smadef.h include/compiler.h libs/libyasdimaster.h libs/libyasdi.h /usr/local/include/yasdi
$ sudo chmod 0644 /usr/local/include/yasdi/*

Note that it might be useful to compile with DEBUG enabled. Otherwise you won't see any output in yasdi.log.


Compile and run solar-logger
============================
1. Fetch and Compile
* Install git (note that the debian package named 'git' is *not* the version control system)
$ apt-get install git-core
* Get the Repository in Read-Only mode
$ git git://github.com/mbarchfe/solar-logger-sqlite.git
$ cd solar-logger-sqlite/src
$ sh configure
$ make

2. Run solar-logger
* Add the /usr/local/liby to the runtime library path, either by setting LD_LIBRARY_PATH or add a global ld.conf
$ export LD_LIBRARY_PATH=/usr/local/lib
$ echo /usr/local/lib >> /etc/ld.so.conf.d/local.conf;ldconfig
$ ldd solar-logger
	linux-gate.so.1 =>  (0x00f0d000)
	libmodbus.so.2 => /usr/local/lib/libmodbus.so.2 (0x00de8000)
	libyasdi.so.1 => /usr/local/lib/libyasdi.so.1 (0x009fa000)
	libyasdimaster.so.1 => /usr/local/lib/libyasdimaster.so.1 (0x007c4000)
	libsqlite3.so.0 => /usr/lib/libsqlite3.so.0 (0x00110000)
	libc.so.6 => /lib/tls/i686/cmov/libc.so.6 (0x0026d000)
	libdl.so.2 => /lib/tls/i686/cmov/libdl.so.2 (0x007ec000)
	libpthread.so.0 => /lib/tls/i686/cmov/libpthread.so.0 (0x00198000)
	/lib/ld-linux.so.2 (0x00bf8000)
$ ./solar-logger

3. Emulate devices
Unless you have a(n) inverter(s) and/or a sunmeter connected to a serial line the solar-logger will not be able
to do anything useful. For debugging and testing purposes there should be means to emulate devices. Currently I see
two solutions:
1. Inverters can be simulated with solarsim (http://www.michaeldenk.de/projects/solarsim). Solarsim emulates 
   inverters on a network. Therefore yasdi must be configured to use the IP driver.
2. A mock tty as provided in ../test. The mock tty emulates the responses of devices on a serial line.
   The responses could have been recorded previously or they could have been made up from scratch, too.
   The test data given there covers one inverter and one sunmeter. 

In order to create a mock tty
* read ../test/README.txt and check solar-logger.ini
* install socat and ruby1.9
$ apt-get install socat ruby1.9
$ cd ../test
* create the mock tty with
$ sh mocktty.sh
$ ./solar-logger

Check /tmp/serialmock.log for information about the emulation going on.

yasdi.log provides important information but next to the configuration of the log file's location in solar-logger.ini 
it also requires that yasdi has been compiled with the DEBUG flag.

If the solar-logger could connect to the mock tty, you will find measurement data in the sqlite database.

$ sqlite3 /tmp/db.sqlite3 ".schema"
CREATE TABLE environment (time integer, temperature integer, irradiance double);
CREATE TABLE inverters (inverterid integer, time integer, pac double, etotal integer);

$ sqlite3 /tmp/db.sqlite3 "select * from environment;"
1265277539|5|85.0
1265277600|5|85.0

$ sqlite3 /tmp/db.sqlite3 "select * from inverters;"
2100147715|1265277538|322.0|77.7410036924994
2100147715|1265277599|322.0|77.7410036924994


